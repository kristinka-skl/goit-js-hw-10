{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nconst buttonElem = document.querySelector('button');\n\nlet timer = {\n    days: document.querySelector('[data-days]'),\n    hours: document.querySelector('[data-hours]'),\n    minutes: document.querySelector('[data-minutes]'),\n    seconds: document.querySelector('[data-seconds]'),\n}\n\nlet userSelectedDate;\nlet intervalId = null;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);    \n    if (selectedDates[0] < options.defaultDate) {\n      buttonElem.classList.remove('is-active');\n      window.alert('Please choose a date in the future');      \n    } else {\n      buttonElem.classList.add('is-active');      \n    }\n    userSelectedDate = selectedDates[0];\n    \n  },\n};\nconst inputElem = document.querySelector('#datetime-picker');\nconst fp = flatpickr(\"#datetime-picker\", options);\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const days = Math.floor(ms / day); \n  const hours = pad(Math.floor((ms % day) / hour));\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n\n\nbuttonElem.addEventListener('click', handleButtonElem);\nfunction handleButtonElem(){\n    buttonElem.classList.remove('is-active');\n    inputElem.setAttribute(\"disabled\", \"\");\n\n    if (intervalId) {\n        return;\n    }    \n    intervalId = setInterval(()=>{        \n        const initTime = Date.now();\n        const diff = userSelectedDate.getTime() - initTime;\n        if (diff >= 0) {\n            const currentMoment = (convertMs(diff));        \n            for (const key in timer) {    \n                timer[key].textContent = currentMoment[key];\n            }\n        } else {\n            clearInterval(intervalId);\n            inputElem.removeAttribute(\"disabled\", \"\");\n        }\n    }, 1000);\n}\n\n\n\n\n\n\n\n\n\n"],"names":["buttonElem","timer","userSelectedDate","intervalId","options","selectedDates","inputElem","flatpickr","pad","value","convertMs","ms","days","hours","minutes","seconds","handleButtonElem","initTime","diff","currentMoment","key"],"mappings":"wIAEA,MAAMA,EAAa,SAAS,cAAc,QAAQ,EAElD,IAAIC,EAAQ,CACR,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CACpD,EAEIC,EACAC,EAAa,KACjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EACxBA,EAAc,CAAC,EAAID,EAAQ,aAC7BJ,EAAW,UAAU,OAAO,WAAW,EACvC,OAAO,MAAM,oCAAoC,GAEjDA,EAAW,UAAU,IAAI,WAAW,EAEtCE,EAAmBG,EAAc,CAAC,CAEnC,CACH,EACMC,EAAY,SAAS,cAAc,kBAAkB,EAChDC,EAAU,mBAAoBH,CAAO,EAChD,SAASI,EAAIC,EAAO,CAClB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CACA,SAASC,EAAUC,EAAI,CAKrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQL,EAAI,KAAK,MAAOG,EAAK,MAAO,IAAI,CAAC,EACzCG,EAAUN,EAAI,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,CAAC,EACtDI,EAAUP,EAAI,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAEvE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGAf,EAAW,iBAAiB,QAASgB,CAAgB,EACrD,SAASA,GAAkB,CACvBhB,EAAW,UAAU,OAAO,WAAW,EACvCM,EAAU,aAAa,WAAY,EAAE,EAEjC,CAAAH,IAGJA,EAAa,YAAY,IAAI,CACzB,MAAMc,EAAW,KAAK,MAChBC,EAAOhB,EAAiB,QAAO,EAAKe,EAC1C,GAAIC,GAAQ,EAAG,CACX,MAAMC,EAAiBT,EAAUQ,CAAI,EACrC,UAAWE,KAAOnB,EACdA,EAAMmB,CAAG,EAAE,YAAcD,EAAcC,CAAG,CAE1D,MACY,cAAcjB,CAAU,EACxBG,EAAU,gBAAgB,WAAY,EAAE,CAE/C,EAAE,GAAI,EACX"}